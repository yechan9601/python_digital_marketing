# -*- coding: utf-8 -*-
"""chap-2-ConversionRate_21801073JooYechan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JlYi5P9LRubu-esi4vg3j5PRdGza0MUj

21801073 / 주예찬

Hands-on data science for marketing, ch2, p41
- sales revenue
- cost per acquisition
- conversion rate: digital marketing KPI

1. aggregate conversion rate
2. conversion rate by age
3. conversion vs non-conversion
4. conversions by age and marital status
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import pandas as pd

"""Conversion Rate, p46"""

df = pd.read_csv('bank-additional-full.csv', sep=';')

df.shape #(Number of Records, Number of Columns)

df.columns

df.head()

df['conversion'] = df['y'].apply(lambda x: 1 if x == 'yes' else 0)

df.head()

"""**1. Aggregate Conversion Rate, p48**"""

df.shape[1] # which means # of col

type(df.shape)

print('total conversions: %i out of %i' % (df.conversion.sum(), df.shape[0]))

df.conversion.sum()

df.conversion[30005]

df.groupby(by='conversion')['y'].count()

print('conversion rate: %0.2f%%' % (df.conversion.sum() / df.shape[0] * 100.0))

"""**1.1 Conversion rates by age, p48**"""

conversions_by_age = df.groupby(by='age')['conversion'].sum() / df.groupby(by='age')['conversion'].count() * 100.0

df.groupby(by='age')['conversion'].sum()

df.groupby(by='age')['conversion'].count()

conversions_by_age

ax = conversions_by_age.plot(
    grid=True,
    figsize=(10,7),
    title='Conversion Rates by Age'
)

ax.set_xlabel('age', fontsize=16)
ax.set_ylabel('conversion rate(%)', fontsize=16)

plt.show()

df['age_group'] = df['age'].apply(
    lambda x: '[18, 20]' if x < 20 else '[20, 25]' if x < 25 
    else '[25, 30]' if x < 30 else '[30, 40]' if x <40 else '[40, 50]' if x < 50
    else '[50, 60]' if x < 60 else '[60, 70]' if x <70 else '[70+]' 
)

df.head()

conversions_by_age_group = df.groupby(
    by='age_group'
)['conversion'].sum() / df.groupby(
    by='age_group'
)['conversion'].count() * 100.0

conversions_by_age_group

ax = conversions_by_age_group.loc[
    ['[18, 20]', '[20, 25]', '[25, 30]', '[30, 40]', '[40, 50]', '[50, 60]',
     '[60, 70]', '[70+]']
].plot(
    kind='bar',
    color='skyblue',
    grid=True,
    figsize=(10, 7),
    title='Conversion Rates by Age Group'
)

ax.set_xlabel('age')
ax.set_ylabel('conversion rate (%)')

plt.show()

"""**Conversions versus non-conversions, p53**"""

conversions_by_marital_status_df = pd.pivot_table(df, values='y', index='marital', columns='conversion', aggfunc=len)
conversions_by_marital_status_df

conversions_by_marital_status_df.plot(
    kind='pie',
    figsize=(15, 7),
    startangle=90,
    subplots=True,
    autopct=lambda x: '%0.1f%%' % x
)

plt.show()

"""**2. Conversion Rates by Number of Contacts**"""

pd.DataFrame(
    df.groupby(
        by='campaign'
    )['conversion'].sum()
)

# campaign 개수 별로 나눈 그룹의 conversion 값을 모두 더한 값.

pd.DataFrame(
    df.groupby(
        by='campaign'
    )['conversion'].count()
)
# campaign 개수 별로 나눈 그룹의 conversion이 NULL이 아닌 값들의 개수.

"""campaign 접촉수 별 conversion rate"""

conversions_by_contacts = df.groupby(
    by='campaign'
)['conversion'].sum() / df.groupby(
    by='campaign'
)['conversion'].count() * 100.0

"""**위의 계산식에서 .sum() 과 .count() 를 이용했는데 campaign 접촉수와 관련한 이 계산식의 의미를 파악하고 아래에 만든 "답" 셀에 그 내용을 자세하게 설명하시오. 이를 위해서 코드를 실행해야 하면 그 코드와 실행결과도 포함하시오.**

답: 

1.   .sum() : campaign 개수 별로 나눈 그룹 내 conversion 값을 모두 더한 값.
2.   .count() : campaign 개수 별로 나눈 그룹 내 conversion 값이 NULL이 아닌 값들의 개수. 


이전 코드에서 'y'값에 따라 0 또는 1의 값을 가지는 'conversion'열을 생성하였다. 그래서 각 그룹 내 conversion 값을 모두 더하면(sum()을 사용하면) 0이 포함된 값들이 있기 때문에 count()의 개수보다 당연히 적게 나타난다. (conversion 값 중 NULL이 없다는 가정 하에.)


반면, count()는 각 그룹내 conversion 값이 Unknown이 아니라면, 즉 NULL이 아니라면 그 값이 0이던 1이던 모두 카운트한다. 따라서 count()의 값이 sum()의 값보다 높게 나타난다. 


계산식은 sum() / count() 값이므로, conversion rate를 나타낸다. conversion이 0 또는 1인 모든 사람들 중에 sum()의 비중이 얼마나 되는지 나타내기 때문이다. 

예)
.sum() : campaign 개수가 1인 그룹 내 conversion 값을 모두 더한 값: 2300

.count() : campaign 개수가 1인 그룹 내 conversion 값이 존재하는 행들의 개수: 17642

2300 / 17642 * 100= 13.03707063
campaign 개수가 1인 그룹의 conversion rate는 13%이다.
"""

pd.DataFrame(conversions_by_contacts)

ax = conversions_by_contacts[:10].plot(
    grid=True,
    figsize=(10, 7),
    xticks=conversions_by_contacts.index[:10],
    title='Conversion Rates by Number of Contacts'
)

ax.set_ylim([0, 15])
ax.set_xlabel('number of contacts')
ax.set_ylabel('conversion rate (%)')

plt.show()

"""**3. Conversion Rates by Age**"""

pd.DataFrame(
    df.groupby(
        by='age'
    )['conversion'].sum()
)

pd.DataFrame(
    df.groupby(
        by='age'
    )['conversion'].count()
)

conversions_by_age = df.groupby(
    by='age'
)['conversion'].sum() / df.groupby(
    by='age'
)['conversion'].count() * 100.0

pd.DataFrame(conversions_by_age)

ax = conversions_by_age.plot(
    grid=True,
    figsize=(10, 7),
    title='Conversion Rate by Age'
)

ax.set_xlabel('age')
ax.set_ylabel('conversion rate (%)')

plt.show()

"""**Age Groups**"""

df['age_group'] = df['age'].apply(
    lambda x: '[18, 30)' if x < 30 else '[30, 40)' if x < 40 else '[40, 50)' if x < 50 
    else '[50, 60)' if x <60 else '[60, 70)' if x < 70 else '70+'
)

df.head()

pd.DataFrame(
    df.groupby(
        by='age_group'
    )['conversion'].sum()
)

pd.DataFrame(
    df.groupby(
        by='age_group'
    )['conversion'].count()
)

conversions_by_age_group = df.groupby(
    by='age_group'
)['conversion'].sum() / df.groupby(
    by='age_group'
)['conversion'].count() * 100.0

pd.DataFrame(conversions_by_age_group)

df['conversion'].loc[df['conversion']==1].count()

ax = conversions_by_age_group.loc[
    ['[18, 30)', '[30, 40)', '[40, 50)', '[50, 60)', '[60, 70)', '70+']
].plot(
    kind='bar',
    color='skyblue',
    grid=True,
    figsize=(10, 7),
    title='Conversion Rates by Age Groups'
)

ax.set_xlabel('age')
ax.set_ylabel('conversion rate (%)')

plt.show()

"""**4. Conversions vs. Non-Conversions, p53**

**4.1 Marital Status**
"""

conversions_by_marital_status_df = pd.pivot_table(df, values='y', index='marital', columns='conversion', aggfunc=len)
conversions_by_marital_status_df

conversions_by_marital_status_df.columns = ['non_conversions', 'conversions']

conversions_by_marital_status_df

conversions_by_marital_status_df.plot(
    kind='pie',
    figsize=(15, 7),
    startangle=90,
    subplots=True,
    autopct=lambda x: '%0.1f%%' % x
)

plt.show()

"""**4.2 Education**"""

conversions_by_education_df = pd.pivot_table(df, values='y', index='education', columns='conversion', aggfunc=len)
conversions_by_education_df

conversions_by_education_df.columns = ['non_conversions', 'conversions']

conversions_by_education_df

conversions_by_education_df.plot(
    kind='pie',
    figsize=(15, 7),
    startangle=90,
    subplots=True,
    autopct=lambda x: '%0.1f%%' % x,
    legend=False
)

plt.show()

"""**4.3 Last Contact Duration**"""

df.groupby('conversion')['duration'].describe()

duration_df = pd.concat([
    df.loc[df['conversion'] == 1, 'duration'].reset_index(drop=True),
    df.loc[df['conversion'] == 0, 'duration'].reset_index(drop=True),
], axis=1)

duration_df.columns = ['conversions', 'non_conversions']

duration_df = duration_df / (60*60)

duration_df

ax = duration_df.plot(
    kind='box',
    grid=True,
    figsize=(10, 10),
)

ax.set_ylabel('last contact duration (hours)')
ax.set_title('Last Contact Duration')

plt.show()

"""**5. Conversions by Age Groups & Marital Status**"""

age_marital_df = df.groupby(['age_group', 'marital'])['conversion'].sum().unstack('marital').fillna(0)

age_marital_df = age_marital_df.divide(
    df.groupby(
        by='age_group'
    )['conversion'].count(),
    axis=0
)

age_marital_df

ax = age_marital_df.loc[
    ['[18, 30)', '[30, 40)', '[40, 50)', '[50, 60)', '[60, 70)', '70+']
].plot(
    kind='bar',
    grid=True,
    figsize=(10, 7)
)

ax.set_title('Conversion rates by Age & Marital Status')
ax.set_xlabel('age group')
ax.set_ylabel('conversion rate (%)')

plt.show()

ax = age_marital_df.loc[
    ['[18, 30)', '[30, 40)', '[40, 50)', '[50, 60)', '[60, 70)', '70+']
].plot(
    kind='bar',
    stacked=True,
    grid=True,
    figsize=(10, 7)
)

ax.set_title('Conversion rates by Age & Marital Status')
ax.set_xlabel('age group')
ax.set_ylabel('conversion rate (%)')

plt.show()